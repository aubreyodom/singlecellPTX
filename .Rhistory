p_pd_deg <- read.csv(file.path(stem, "cluster_deg_p_vs_pd.csv"))
pd_c_deg <- read.csv(file.path(stem, "cluster_deg_pd_vs_control.csv"))
install.packages("ggplot2")
# TO ADD DEX vs. PTX and DEX vs. Control
NC_p_c_deg <- read.csv(file.path(stem, "deg_p_vs_control.csv"))
NC_pd_c_deg <- read.csv(file.path(stem, "deg_pd_vs_control.csv"))
NC_p_d_deg <- read.csv(file.path(stem, "deg_p_vs_d.csv"))
NC_d_c_deg <- read.csv(file.path(stem, "deg_d_vs_control.csv"))
gene_list <- c(
# These genes are those to be validated - microcalcification; remodeling
# PRIMARY
"SPP1", "MGP", "MMP9", "TIMP1", "TIMP2", "COL1A2", "ACTA2", "ITGA1", "CSF1", "TP53", "BCL2L1",
# SUPPORTING
"RUNX2", "ALPL", "CD68", "IL1B", "TNF", "ICAM1", "VCAM1", "LGALS3BP") |>
str_to_title()
suppressPackageStartupMessages({
library(tidyverse)
})
save_folder <- "~/altcells/singlecellseq/vitalia_scs_aro/figures_tm/deg_tables"
stem <- "/projectnb/altcells/singlecellseq/vitalia_scs_aro/processed_data"
p_c_deg <- read.csv(file.path(stem, "cluster_deg_p_vs_control.csv"))
p_pd_deg <- read.csv(file.path(stem, "cluster_deg_p_vs_pd.csv"))
pd_c_deg <- read.csv(file.path(stem, "cluster_deg_pd_vs_control.csv"))
gene_list <- c(
# These genes are those to be validated - microcalcification; remodeling
# PRIMARY
"SPP1", "MGP", "MMP9", "TIMP1", "TIMP2", "COL1A2", "ACTA2", "ITGA1", "CSF1", "TP53", "BCL2L1",
# SUPPORTING
"RUNX2", "ALPL", "CD68", "IL1B", "TNF", "ICAM1", "VCAM1", "LGALS3BP") |>
str_to_title()
# Combine dataframes with necessary covariates
df_list <- list(NC_p_c_deg, NC_pd_c_deg, NC_d_c_deg, NC_p_d_deg) |>
set_names(c("PTX vs. Control", "PTX + DEX vs. Control")) |>
lapply(function(x) select(x, avg_log2FC, p_val_adj, X))
gene_list <- c(
# These genes are those to be validated - microcalcification; remodeling
# PRIMARY
"SPP1", "MGP", "MMP9", "TIMP1", "TIMP2", "COL1A2", "ACTA2", "ITGA1", "CSF1", "TP53", "BCL2L1",
# SUPPORTING
"RUNX2", "ALPL", "CD68", "IL1B", "TNF", "ICAM1", "VCAM1", "LGALS3BP") |>
str_to_title()
# Combine dataframes with necessary covariates
df_list <- list(NC_p_c_deg, NC_pd_c_deg, NC_d_c_deg, NC_p_d_deg) |>
set_names(c("PTX vs. Control", "PTX + DEX vs. Control",
"DEX vs. Control", "PTX vs. DEX")) |>
lapply(function(x) select(x, avg_log2FC, p_val_adj, X))
combined_df <- lapply(names(df_list),
function(name) mutate(df_list[[name]], Source = name)) |>
bind_rows() |>
# Round p-values for display
rename(Comparison = Source, Gene = X) |>
mutate("Avg log2 FC" = round(`avg_log2FC`, 1),
direction = ifelse(`avg_log2FC` > 0, yes = "Pos", no = "Neg")) |>
filter(Gene %in% gene_list)
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(anvgle = 45, hjust = 1)) +
labs(title = "Differential gene expression results", x = "Comparison", y = "Gene",
subtitle = "of i")
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
)
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results", x = "Comparison", y = "Gene",
subtitle = "of i")
gene_list <- c(
# These genes are those to be validated - microcalcification; remodeling
# PRIMARY
"SPP1", "MGP", "MMP9", "TIMP1", "TIMP2", "COL1A2", "ACTA2", "ITGA1", "CSF1", "TP53", "BCL2L1",
# SUPPORTING
"RUNX2", "ALPL", "CD68", "IL1B", "TNF", "ICAM1", "VCAM1", "LGALS3BP") |>
str_to_title()
# Combine dataframes with necessary covariates
df_list <- list(NC_p_c_deg, NC_pd_c_deg, NC_d_c_deg, NC_p_d_deg) |>
set_names(c("PTX vs. Control", "PTX + DEX vs. Control",
"DEX vs. Control", "PTX vs. DEX")) |>
lapply(function(x) select(x, avg_log2FC, p_val_adj, X))
combined_df <- lapply(names(df_list),
function(name) mutate(df_list[[name]], Source = name)) |>
bind_rows() |>
# Round p-values for display
rename(Comparison = Source, Gene = X) |>
mutate("Avg log2 FC" = round(`avg_log2FC`, 1),
direction = ifelse(`avg_log2FC` > 0, yes = "Pos", no = "Neg")) |>
filter(Gene %in% gene_list)
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results", x = "Comparison", y = "Gene",
subtitle = "of i")
View(NC_p_c_deg)
View(NC_p_d_deg)
View(NC_d_c_deg)
View(NC_pd_c_deg)
combined_df
View(combined_df)
combined_df <- lapply(names(df_list),
function(name) mutate(df_list[[name]], Source = name)) |>
bind_rows() |>
# Round p-values for display
rename(Comparison = Source, Gene = X) |>
mutate("Avg log2 FC" = round(`avg_log2FC`, 1),
direction = ifelse(`avg_log2FC` > 0, yes = "Pos", no = "Neg")) |>
filter(Gene %in% gene_list) |>
mutate(p_val_adj = ifelse(p_val_adj > 0.05, NA, p_val_adj))
combined_df <- lapply(names(df_list),
function(name) mutate(df_list[[name]], Source = name)) |>
bind_rows() |>
# Round p-values for display
rename(Comparison = Source, Gene = X) |>
mutate("Avg log2 FC" = round(`avg_log2FC`, 1),
direction = ifelse(`avg_log2FC` > 0, yes = "Pos", no = "Neg")) |>
filter(Gene %in% gene_list) |>
mutate(`Avg log2 FC` = ifelse(p_val_adj > 0.05, NA, p_val_adj))
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results", x = "Comparison", y = "Gene",
subtitle = "of i")
combined_df <- lapply(names(df_list),
function(name) mutate(df_list[[name]], Source = name)) |>
bind_rows() |>
# Round p-values for display
rename(Comparison = Source, Gene = X) |>
mutate("Avg log2 FC" = round(`avg_log2FC`, 1),
direction = ifelse(`avg_log2FC` > 0, yes = "Pos", no = "Neg")) |>
filter(Gene %in% gene_list) |>
mutate(`Avg log2 FC` = ifelse(p_val_adj > 0.05, NA, `Avg log2 FC`))
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results", x = "Comparison", y = "Gene",
subtitle = "of i")
combined_df <- lapply(names(df_list),
function(name) mutate(df_list[[name]], Source = name)) |>
bind_rows() |>
# Round p-values for display
rename(Comparison = Source, Gene = X) |>
mutate("Avg log2 FC" = round(`avg_log2FC`, 1),
direction = ifelse(`avg_log2FC` > 0, yes = "Pos", no = "Neg")) |>
filter(Gene %in% gene_list) |>
mutate(`Avg log2 FC` = ifelse(p_val_adj > 0.05, NA, `Avg log2 FC`),
direction = ifelse(p_val_adj > 0.05, NA, direction))
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results", x = "Comparison", y = "Gene",
subtitle = "of i")
combined_df <- lapply(names(df_list),
function(name) mutate(df_list[[name]], Source = name)) |>
bind_rows() |>
# Round p-values for display
rename(Comparison = Source, Gene = X) |>
mutate("Avg log2 FC" = round(`avg_log2FC`, 1),
direction = ifelse(`avg_log2FC` > 0, yes = "Pos", no = "Neg")) |>
filter(Gene %in% gene_list,
p_val_adj <= 0.05)
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results", x = "Comparison", y = "Gene",
subtitle = "of i")
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results", x = "Comparison", y = "Gene",
subtitle = "Non-significant results removed")
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results",
x = "DEG Comparison", y = "Gene",
caption = "Non-significant results removed",
subtitle = "Genes for validation in mice")
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results",
x = "DEG Comparison", y = "Gene",
caption = "** Non-significant results removed",
subtitle = "Genes for validation in mice")
ggsave(file.path(save_folder, paste0("DEG_heatmap_genes_for_validation.png")),
width = 5,
height = 6)
ggsave(file.path(save_folder, paste0("DEG_heatmap_genes_for_validation.png")),
width = 5,
height = 4)
ggsave(file.path(save_folder, paste0("DEG_heatmap_genes_for_validation.png")),
width = 5,
height = 5)
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results",
x = "DEG Comparison", y = "Gene",
caption = "** Non-significant results removed",
subtitle = "Genes for validation in mice") +
theme_bw
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results",
x = "DEG Comparison", y = "Gene",
caption = "** Non-significant results removed",
subtitle = "Genes for validation in mice") +
theme_bw()
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results",
x = "DEG Comparison", y = "Gene",
caption = "** Non-significant results removed",
subtitle = "Genes for validation in mice") +
theme_classic()
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
theme_classic() +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results",
x = "DEG Comparison", y = "Gene",
caption = "** Non-significant results removed",
subtitle = "Genes for validation in mice")
# Create the heatmap
ggplot(combined_df, aes(x = Comparison, y = Gene, fill = `direction`)) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("Pos" = "red", "Neg" = "lightblue"), # Set colors for levels
name = "Direction"
) +
theme_classic() +
geom_text(aes(label = `Avg log2 FC`), color = "black",
size = 4, na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Differential gene expression results",
x = "DEG Comparison", y = "Gene",
caption = "** Non-significant results removed",
subtitle = "Genes for validation in mice")
ggsave(file.path(save_folder, paste0("DEG_heatmap_genes_for_validation.png")),
width = 5,
height = 5)
suppressPackageStartupMessages({
library(tidyverse)
library(TBSignatureProfiler)
library(MultiAssayExperiment)
})
fig_folder <- "~/altcells/singlecellseq/vitalia_scs_aro/figures_tm"
output <- vector(mode = "list")
i <- 1
for (clust in unique(outsig_x2$clusters)) {
ind1 <- outsig_x2$Treatment %in% c("Ptreatment", "control")
ind2 <- outsig_x2$clusters %in% clust
filt_SE <- outsig_x2[, ind1 & ind2]
output[[i]] <- tableAUC(filt_SE,
annotationColName = "Treatment",
signatureColNames = all_sigs,
output = "data.frame",
num.boot = 1000) |>
mutate(cluster = clust)
names(output)[i] <- clust
i <- i + 1
}
suppressPackageStartupMessages({
library(tidyverse)
library(TBSignatureProfiler)
library(MultiAssayExperiment)
})
fig_folder <- "~/altcells/singlecellseq/vitalia_scs_aro/figures_tm"
data_reclustered <- readRDS("~/altcells/singlecellseq/vitalia_scs_aro/processed_data/data_reclustered.RDS")
# Read in sig
make_sig_list <- function(sig) {
URL_loc <- paste0( "https://www.gsea-msigdb.org/gsea/msigdb/human/download_geneset.jsp?geneSetName=",
sig,
"&fileType=TSV")
geneset1 <- read.delim(URL_loc) |>
dplyr::filter(STANDARD_NAME == "GENE_SYMBOLS") |>
pull(2) |>
stringr::str_split(",") |>
unlist()
}
sig_names <- c("HP_THORACIC_AORTA_CALCIFICATION",
"HP_VASCULAR_CALCIFICATION",
"HP_MITRAL_VALVE_CALCIFICATION",
"HP_AORTIC_VALVE_CALCIFICATION",
"HP_CALCIFICATION_OF_THE_AORTA",
"HP_CARDIAC_VALVE_CALCIFICATION",
"HP_CARDIOVASCULAR_CALCIFICATION"
)
calc_sigs <- sig_names |>
plyr::alply(1, make_sig_list) |>
set_names(sig_names)
sigs_in <- unique(unlist(calc_sigs))
new_counts <- data_reclustered@assays$integrated$scale.data
SE_rec <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts = new_counts),
colData = data_reclustered@meta.data)
outsig_x2 <- TBSignatureProfiler::runTBsigProfiler(
SE_rec,
useAssay = "counts",
algorithm = c("PLAGE", "ssGSEA"),
combineSigAndAlgorithm = TRUE,
signatures = calc_sigs,
outputFormat = "SummarizedExperiment",
parallel.sz = parallel::detectCores()
)
# limit to only control and PTX
output <- vector(mode = "list")
i <- 1
for (clust in unique(outsig_x2$clusters)) {
ind1 <- outsig_x2$Treatment %in% c("Ptreatment", "control")
ind2 <- outsig_x2$clusters %in% clust
filt_SE <- outsig_x2[, ind1 & ind2]
output[[i]] <- tableAUC(filt_SE,
annotationColName = "Treatment",
signatureColNames = all_sigs,
output = "data.frame",
num.boot = 1000) |>
mutate(cluster = clust)
names(output)[i] <- clust
i <- i + 1
}
suppressPackageStartupMessages({
library(tidyverse)
library(TBSignatureProfiler)
library(MultiAssayExperiment)
})
fig_folder <- "~/altcells/singlecellseq/vitalia_scs_aro/figures_tm"
data_reclustered <- readRDS("~/altcells/singlecellseq/vitalia_scs_aro/processed_data/data_reclustered.RDS")
# Read in sig
make_sig_list <- function(sig) {
URL_loc <- paste0( "https://www.gsea-msigdb.org/gsea/msigdb/human/download_geneset.jsp?geneSetName=",
sig,
"&fileType=TSV")
geneset1 <- read.delim(URL_loc) |>
dplyr::filter(STANDARD_NAME == "GENE_SYMBOLS") |>
pull(2) |>
stringr::str_split(",") |>
unlist() |>
stringr::str_to_sentence()
}
sig_names <- c("HP_THORACIC_AORTA_CALCIFICATION",
"HP_VASCULAR_CALCIFICATION",
"HP_MITRAL_VALVE_CALCIFICATION",
"HP_AORTIC_VALVE_CALCIFICATION",
"HP_CALCIFICATION_OF_THE_AORTA",
"HP_CARDIAC_VALVE_CALCIFICATION",
"HP_CARDIOVASCULAR_CALCIFICATION"
)
calc_sigs <- sig_names |>
plyr::alply(1, make_sig_list) |>
set_names(sig_names)
sigs_in <- unique(unlist(calc_sigs))
new_counts <- data_reclustered@assays$integrated$scale.data
set.seed(5000)
which_in <- sigs_in %in% rownames(new_counts)
all_cells <- rownames(new_counts) |>
sample(size = 7000, replace = FALSE) |>
append(sigs_in[which_in]) |>
unique() |>
unlist()
new_counts_sub <- new_counts[all_cells, ]
SE_rec <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts = new_counts_sub),
colData = data_reclustered@meta.data)
outsig_x2 <- TBSignatureProfiler::runTBsigProfiler(
SE_rec,
useAssay = "counts",
algorithm = c("PLAGE", "ssGSEA"),
combineSigAndAlgorithm = TRUE,
signatures = calc_sigs,
outputFormat = "SummarizedExperiment",
parallel.sz = parallel::detectCores()
)
set.seed(5000)
which_in <- sigs_in %in% rownames(new_counts)
all_cells <- rownames(new_counts) |>
sample(size = 1000, replace = FALSE) |>
append(sigs_in[which_in]) |>
unique() |>
unlist()
new_counts_sub <- new_counts[all_cells, ]
SE_rec <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts = new_counts_sub),
colData = data_reclustered@meta.data)
saveRDS(SE_rec, "~/SE_rec.RDS")
saveRDS(calc_sigs, "~/calc_sigs.RDS")
outsig_x2 <- TBSignatureProfiler::runTBsigProfiler(
SE_rec,
useAssay = "counts",
algorithm = c("PLAGE", "ssGSEA"),
combineSigAndAlgorithm = TRUE,
signatures = calc_sigs,
outputFormat = "SummarizedExperiment",
parallel.sz = parallel::detectCores()
)
colData(outsig_x2) <- cbind(colData(outsig_x2),
colData(SE_rec))
