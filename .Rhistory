title = "UMAP visualization of cell type diversity across treatments") +
scale_color_manual(values = palette) +
theme_classic() +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
ggsave(file.path(fig_folder, "UMAP_across_trt_FIG1.png"),
width = 6, height = 4.5)
cluster_matched_cells <- tibble(cluster = Idents(data_reclustered), data_reclustered[["SingleR.pruned"]])
summary_main <- cluster_matched_cells |>
arrange(cluster) |>
group_by(cluster, SingleR.pruned) |>
summarise(num_each = n()) |>
arrange(cluster, desc(num_each))
summary_main |>
dplyr::mutate(proportion = num_each / sum(num_each),
"Cell type" = factor(SingleR.pruned, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = cluster, y = num_each, fill = `Cell type`)) +
geom_bar(stat = "identity") +
ggplot2::scale_fill_manual(values = palette) +
ggplot2::theme_bw() +
labs(main = "Cell Type Composition Across Clusters") +
ggplot2::xlab("Cluster") +
ggplot2::ylab("Total cell count") +
theme(legend.position = "bottom") +
labs(title = "Proportion of cell types by cluster",
subtitle = "All treatments")
ggsave(file.path(fig_folder, "barplot_main_labels_FIG1.png"),
width = 9, height = 5, units = "in")
suppressPackageStartupMessages({
library(tidyverse)
library(TBSignatureProfiler)
library(MultiAssayExperiment)
})
fig_folder <- "~/altcells/singlecellseq/vitalia_scs_aro/figures_tm"
compareBoxplots(inputData = in_dat,
annotationData = new_df,
annotationColName = "Disease",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
suppressPackageStartupMessages({
library(tidyverse)
library(TBSignatureProfiler)
library(MultiAssayExperiment)
})
fig_folder <- "~/altcells/singlecellseq/vitalia_scs_aro/figures_tm"
data_reclustered <- readRDS("~/altcells/singlecellseq/vitalia_scs_aro/processed_data/data_reclustered.RDS")
# Read in sig
make_sig_list <- function(sig) {
URL_loc <- paste0( "https://www.gsea-msigdb.org/gsea/msigdb/human/download_geneset.jsp?geneSetName=",
sig,
"&fileType=TSV")
geneset1 <- read.delim(URL_loc) |>
dplyr::filter(STANDARD_NAME == "GENE_SYMBOLS") |>
pull(2) |>
stringr::str_split(",") |>
unlist() |>
stringr::str_to_sentence()
}
sig_names <- c("HP_THORACIC_AORTA_CALCIFICATION",
"HP_VASCULAR_CALCIFICATION",
"HP_MITRAL_VALVE_CALCIFICATION",
"HP_AORTIC_VALVE_CALCIFICATION",
"HP_CALCIFICATION_OF_THE_AORTA",
"HP_CARDIAC_VALVE_CALCIFICATION",
"HP_CARDIOVASCULAR_CALCIFICATION"
)
calc_sigs <- sig_names |>
plyr::alply(1, make_sig_list) |>
set_names(sig_names)
sigs_in <- unique(unlist(calc_sigs))
new_counts <- data_reclustered@assays$integrated$scale.data
set.seed(5000)
which_in <- sigs_in %in% rownames(new_counts)
all_cells <- rownames(new_counts) |>
sample(size = 1000, replace = FALSE) |>
append(sigs_in[which_in]) |>
unique() |>
unlist()
new_counts_sub <- new_counts[all_cells, ]
SE_rec <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts = new_counts_sub),
colData = data_reclustered@meta.data)
outsig_x2 <- TBSignatureProfiler::runTBsigProfiler(
SE_rec,
useAssay = "counts",
algorithm = c("PLAGE", "ssGSEA"),
combineSigAndAlgorithm = TRUE,
signatures = calc_sigs,
outputFormat = "SummarizedExperiment",
parallel.sz = parallel::detectCores()
)
colData(outsig_x2) <- cbind(colData(outsig_x2),
colData(SE_rec))
all_sigs <- paste(c("PLAGE", "ssGSEA"), names(calc_sigs), sep = "_")
new_df <- data.frame(Trt = colData(SE_rec)$Treatment)
rownames(new_df) <- rownames(colData(SE_rec))
# make numeric
in_dat <- as.data.frame(colData(outsig_x2))[, all_sigs]
signatureBoxplot(inputData = in_dat,
annotationData = new_df,
signatureColNames = all_sigs,
scale = TRUE)
ggsave(file.path(fig_folder, "sigs_boxplot.png"),
units = "in", width = 12, height = 7)
compareBoxplots(inputData = in_dat,
annotationData = new_df,
annotationColName = "Disease",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
?compareBoxplots
compareBoxplots(inputData = outsig_x2,
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
compareBoxplots(SE_scored = outsig_x2,
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
compareBoxplots(SE_scored = outsig_x2,
annotationColName = Treatment,
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
compareBoxplots(SE_scored = outsig_x2,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
class(outsig_x2)
colData(outsig_x2) %>%
as.data.frame()
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "Control")) %>%
rownames()
filtered_samples
se_filtered <- outsig_x2[, filtered_samples]
se_filtered
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
se_filtered
(se_filtered$Treatment)
unique(se_filtered$Treatment)
unique(outsig_x2$Treatment)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "control")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 12, height = 7)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "control")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 12, height = 4)
all_sigs
calc_sigs
names(calc_sigs)
paste(c("PLAGE", "ssGSEA"), names(calc_sigs), sep = "_")
all_sigs <- paste(c("PLAGE"), names(calc_sigs),
sep = "_") |>
append(paste(c("ssGSEA"), names(calc_sigs),
sep = "_"))
new_df <- data.frame(Trt = colData(SE_rec)$Treatment)
rownames(new_df) <- rownames(colData(SE_rec))
# make numeric
in_dat <- as.data.frame(colData(outsig_x2))[, all_sigs]
signatureBoxplot(inputData = in_dat,
annotationData = new_df,
signatureColNames = all_sigs,
scale = TRUE)
ggsave(file.path(fig_folder, "sigs_boxplot.png"),
units = "in", width = 12, height = 7)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "control")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 12, height = 4)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "control")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 12, height = 4)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 6, height = 4)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 6, height = 9)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "PDtreatment")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 6, height = 9)
unique(se_filtered$Treatment)
unique(outsig_x2$Treatment)
# Define all treatment combinations
treatments <- c("PDtreatment", "Ptreatment", "Dtreatment", "control")
combinations <- combn(treatments, 2, simplify = FALSE)
# Loop through each pairwise combination
for (combo in combinations) {
treatment1 <- combo[1]
treatment2 <- combo[2]
# Filter samples for the current treatment combination
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c(treatment1, treatment2)) %>%
rownames()
# Subset the SummarizedExperiment
se_filtered <- outsig_x2[, filtered_samples]
# Generate the boxplot
compareBoxplots(
SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE,
rotateLabels = TRUE
)
# Save the plot with a unique filename
filename <- paste0("gsea_compare_boxplots_", treatment1, "_vs_", treatment2, ".png")
ggsave(file.path(fig_folder, filename), units = "in", width = 6, height = 9)
}
suppressPackageStartupMessages({
library(tidyverse)
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(SingleR)
library(SingleCellExperiment)
library(BiocParallel)
library(randomcoloR)
library(celldex)
#library(iTALK)
library(clusterProfiler)
library(msigdbr)
library(org.Hs.eg.db)
library(AnnotationDbi)
# /satijalab/seurat-data
})
stem <- "~/altcells/singlecellseq/vitalia_scs_aro"
fig_path <- file.path(stem, "figures_tm")
data_combined <- readRDS(file.path(stem, "processed_data/data_combined.RDS"))
deg_results <- read.csv(file.path(stem, "processed_data/deg_p_vs_control.csv"),
row.names = 1, header = TRUE)
deg_results$GeneSymbol <- toupper(rownames(deg_results))
gene_annotations <- select(org.Hs.eg.db, keys = keys(org.Hs.eg.db, keytype = "ENTREZID"),
columns = c("SYMBOL", "GENETYPE"), keytype = "ENTREZID")
protein_coding_genes <- gene_annotations$SYMBOL[gene_annotations$GENETYPE == "protein-coding"]
deg_results <- deg_results[deg_results$GeneSymbol %in% protein_coding_genes, ]
deg_results <- deg_results[deg_results$p_val_adj <= 0.05,]
# Extract log fold change values from the DEG results
deg_ranks <- deg_results$avg_log2FC
# Remove NA values (if present)
deg_ranks <- na.omit(deg_ranks)
names(deg_ranks) <- rownames(deg_results)
# Rank genes by log2FC
deg_ranks <- sort(deg_ranks, decreasing = TRUE)
# Download MSigDB gene sets for human
msigdb_data <- msigdbr(species = "Homo sapiens")
# Optionally, filter for a specific collection (e.g., "H" for Hallmark gene sets)
msigdb_hallmark <- msigdb_data[msigdb_data$gs_collection == "C5", ]
vascular_related <- msigdb_hallmark[grep("calcification|vascular|osteogenesis|smooth muscle|struct|matrix|remodel",
msigdb_hallmark$gs_name, ignore.case = TRUE), ]
# Convert gene symbols in your ranked list to uppercase
names(deg_ranks) <- toupper(names(deg_ranks))
# Ensure the gene sets in the TERM2GENE object are also uppercase
vascular_related$gene_symbol <- toupper(vascular_related$gene_symbol)
# Run GSEA using the Hallmark gene sets from MSigDB
gsea_results <- GSEA(geneList = deg_ranks,
TERM2GENE = vascular_related[, c("gs_name", "gene_symbol")],
pvalueCutoff = 1,
verbose = TRUE)
# View the top enriched pathways
head(gsea_results)
gsea_results_filt <- gsea_results |>
filter(p.adjust < 0.05)
# Dot plot of the top GSEA results
dotplot(gsea_results_filt, showCategory = 60) + ggtitle("GSEA Results")
ggsave(file.path(fig_path, "GSEA_dotplot_hallmark.png"), width = 8, height= 20)
# Save GSEA results to CSV
write.csv(as.data.frame(gsea_results_filt),
file = file.path(fig_path, "GSEA_hallmark_results.csv"))
gsea_results
gsea_results_filt <- gsea_results |>
filter(p.adjust < 0.05) |> View()
gsea_results_filt <- gsea_results |>
filter(p.adjust < 0.05) |>
as.data.frame() |>
View()
suppressPackageStartupMessages({
library(tidyverse)
library(TBSignatureProfiler)
library(MultiAssayExperiment)
})
fig_folder <- "~/altcells/singlecellseq/vitalia_scs_aro/figures_tm"
data_reclustered <- readRDS("~/altcells/singlecellseq/vitalia_scs_aro/processed_data/data_reclustered.RDS")
# Read in sig
make_sig_list <- function(sig) {
URL_loc <- paste0( "https://www.gsea-msigdb.org/gsea/msigdb/human/download_geneset.jsp?geneSetName=",
sig,
"&fileType=TSV")
geneset1 <- read.delim(URL_loc) |>
dplyr::filter(STANDARD_NAME == "GENE_SYMBOLS") |>
pull(2) |>
stringr::str_split(",") |>
unlist() |>
stringr::str_to_sentence()
}
sig_names <- c("HP_THORACIC_AORTA_CALCIFICATION",
"HP_VASCULAR_CALCIFICATION",
"HP_MITRAL_VALVE_CALCIFICATION",
"HP_AORTIC_VALVE_CALCIFICATION",
"HP_CALCIFICATION_OF_THE_AORTA",
"HP_CARDIAC_VALVE_CALCIFICATION",
"HP_CARDIOVASCULAR_CALCIFICATION"
)
calc_sigs <- sig_names |>
plyr::alply(1, make_sig_list) |>
set_names(sig_names)
sigs_in <- unique(unlist(calc_sigs))
new_counts <- data_reclustered@assays$integrated$scale.data
set.seed(5000)
which_in <- sigs_in %in% rownames(new_counts)
all_cells <- rownames(new_counts) |>
sample(size = 5000, replace = FALSE) |>
append(sigs_in[which_in]) |>
unique() |>
unlist()
new_counts_sub <- new_counts[all_cells, ]
SE_rec <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts = new_counts_sub),
colData = data_reclustered@meta.data)
outsig_x2 <- TBSignatureProfiler::runTBsigProfiler(
SE_rec,
useAssay = "counts",
algorithm = c("PLAGE", "ssGSEA"),
combineSigAndAlgorithm = TRUE,
signatures = calc_sigs,
outputFormat = "SummarizedExperiment",
parallel.sz = parallel::detectCores()
)
colData(outsig_x2) <- cbind(colData(outsig_x2),
colData(SE_rec))
all_sigs <- paste(c("PLAGE"), names(calc_sigs),
sep = "_") |>
append(paste(c("ssGSEA"), names(calc_sigs),
sep = "_"))
new_df <- data.frame(Trt = colData(SE_rec)$Treatment)
rownames(new_df) <- rownames(colData(SE_rec))
# make numeric
in_dat <- as.data.frame(colData(outsig_x2))[, all_sigs]
signatureBoxplot(inputData = in_dat,
annotationData = new_df,
signatureColNames = all_sigs,
scale = TRUE)
ggsave(file.path(fig_folder, "sigs_boxplot.png"),
units = "in", width = 12, height = 7)
# Define all treatment combinations
treatments <- c("PDtreatment", "Ptreatment", "Dtreatment", "control")
combinations <- combn(treatments, 2, simplify = FALSE)
# Loop through each pairwise combination
for (combo in combinations) {
treatment1 <- combo[1]
treatment2 <- combo[2]
# Filter samples for the current treatment combination
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c(treatment1, treatment2)) %>%
rownames()
# Subset the SummarizedExperiment
se_filtered <- outsig_x2[, filtered_samples]
# Generate the boxplot
compareBoxplots(
SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE,
rotateLabels = TRUE
)
# Save the plot with a unique filename
filename <- paste0("gsea_compare_boxplots_", treatment1, "_vs_", treatment2, ".png")
ggsave(file.path(fig_folder, filename), units = "in", width = 6, height = 9)
}
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "PDtreatment")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 6, height = 9)
# limit to only control and PTX
output <- vector(mode = "list")
i <- 1
for (clust in unique(outsig_x2$clusters)) {
ind1 <- outsig_x2$Treatment %in% c("Ptreatment", "control")
ind2 <- outsig_x2$clusters %in% clust
filt_SE <- outsig_x2[, ind1 & ind2]
output[[i]] <- tableAUC(filt_SE,
annotationColName = "Treatment",
signatureColNames = all_sigs,
output = "data.frame",
num.boot = 1000) |>
mutate(cluster = clust)
names(output)[i] <- clust
i <- i + 1
}
all_aucs <- bind_rows(output) |> arrange(desc(AUC))
write.csv(all_aucs, file.path(fig_folder, "GSEA_control_P_AUC.csv"))
your_genes <- c("Il6", "Tnf", paste0("Tgfb", c(1, 2, 3)),
"Runx2", "Spp1")
avg_expr <- Seurat::AverageExpression(data_reclustered, features = your_genes, group.by = c("seurat_clusters", "Treatment"),
assays = "integrated", slot = "scale.data", scale.factor = 100, layer = "scale.data")$integrated |>
as.data.frame() |>
# select(starts_with(c("g8_", "g15_", "g16_"))) |>
rownames_to_column('genes') |>
pivot_longer(cols = -1,
names_to = c("Cluster", "Treatment"),
names_sep = "_",
values_to = "value") |>
mutate(alpha = 0.5)
avg_expr$Cluster <- stringr::str_split_i(avg_expr$Cluster,
"g", i = -1) |>
as.numeric()
avg_expr$alpha_a <- avg_expr$alpha |>
replace(avg_expr$Cluster %in% c(8, 15, 16), 1)
ggplot(avg_expr,
aes(x = Cluster, y = value, fill = Treatment,
alpha = alpha_a)) +
geom_bar(stat = "identity", aes(alpha = alpha_a)) +
theme_bw() +
labs(title = "Inflammation cytokines",
x = "Cluster", y = "Average gene expression (scaled") +
facet_wrap(~genes) +
scale_alpha_continuous(range = c(0.5, 1)) +
guides(alpha = "none")
ggsave(file.path(fig_folder, "cytokines_barplot.png"),
units = "in", width = 12, height = 7)
all_genes <- unique(unlist(calc_sigs))
all_signames <- names(calc_sigs)
check_genes <- function(this_signame) {
# iterate
output <- all_genes %in% calc_sigs[[this_signame]] |>
as.numeric() |>
set_names(all_genes)
return(output)
}
logical_df <- plyr::adply(all_signames, 1, check_genes, .id = NULL) |>
t() |> as.data.frame() |>
magrittr::set_colnames(all_signames) |>
rownames_to_column("Element")
# Convert to long format using tidyr's pivot_longer
long_df <- pivot_longer(logical_df, cols = -Element, names_to = "Vector", values_to = "Present")
# Plot using ggplot
ggplot(long_df, aes(x = Vector, y = Element, fill = Present)) +
geom_tile(color = "black") +
scale_fill_gradient(low = "white", high = "blue", guide = "none") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Gene representation among signatures",
subtitle = "Human CV calcification signatures",
x = "Signature", y = "Gene")
ggsave(file.path(fig_folder, "calcification_sigs.png"),
units = "in", width = 6, height = 6.5)
# Convert to -10x
aucs_subset <- all_aucs |>
filter(AUC > 0.6) |>
mutate(pval_sci = 10^(-neg10xLog.P.value.) |>
formatC(format = "e", digits = 2)) |>
select(Signature, pval_sci, AUC, cluster)
aucs_subset <- all_aucs |>
filter(AUC > 0.6) |>
mutate(pval_sci = 10^(-neg10xLog.P.value.) |>
formatC(format = "e", digits = 2)) |>
dplyr::select(Signature, pval_sci, AUC, cluster)
write.csv(aucs_subset, file.path(fig_folder, "subset_GSEA_control_P_AUC.csv"))
aucs_subset
View(aucs_subset)
