by = "rowname") |>
dplyr::rename("Cluster type" = "celltype",
"Cluster id" = "clusters")
# Compute centroids
centroids <- input_umap_dat |>
group_by(`Cluster id`, `Cluster type`) |>
summarise(umap_1 = mean(umap_1), umap_2 = mean(umap_2))
# UMAP plot with centroid labels
in_umap_shuff <- input_umap_dat[sample(nrow(input_umap_dat)), ]
in_umap_shuff |>
mutate("Cell type" = factor(fctr_celltype, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = umap_1, y = umap_2,
colour = `Cell type`)) +
geom_point(alpha = 0.4, size = 0.4) +
geom_text_repel(data = centroids,
aes(x = umap_1 + 0.5, y = umap_2 + 0.5, label = `Cluster type`),
size = 3, fontface = "bold", color = "black",
box.padding = 0.3, point.padding = 0.2,
segment.color = NA, inherit.aes = FALSE) +
labs(x = "UMAP Axis 1", y = "UMAP Axis 2",
title = "UMAP Plot",
subtitle = "All treatments") +
scale_color_manual(values = palette) +
theme_classic() +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
ggsave(file.path(fig_folder, "UMAP_across_trt_FIG1.png"), width = 8, height = 5)
# UMAP
input_umap_dat <- Embeddings(data_reclustered, reduction = "umap") |>
as.data.frame() |>
rownames_to_column() |>
left_join(rownames_to_column(data_reclustered@meta.data),
by = "rowname") |>
dplyr::rename("Cluster type" = "celltype",
"Cluster id" = "clusters")
# Compute centroids
centroids <- input_umap_dat |>
group_by(`Cluster id`, `Cluster type`) |>
summarise(umap_1 = mean(umap_1), umap_2 = mean(umap_2))
# UMAP plot with centroid labels
in_umap_shuff <- input_umap_dat[sample(nrow(input_umap_dat)), ]
in_umap_shuff |>
mutate("Cell type" = factor(fctr_celltype, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = umap_1, y = umap_2,
colour = `Cell type`)) +
geom_point(alpha = 0.4, size = 0.4) +
geom_text_repel(data = centroids,
aes(x = umap_1 + 0.5, y = umap_2 + 0.5, label = `Cluster id`),
size = 3, fontface = "bold", color = "black",
box.padding = 0.3, point.padding = 0.2,
segment.color = NA, inherit.aes = FALSE) +
labs(x = "UMAP Axis 1", y = "UMAP Axis 2",
title = "UMAP Plot",
subtitle = "All treatments") +
scale_color_manual(values = palette) +
theme_classic() +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
ggsave(file.path(fig_folder, "UMAP_across_trt_FIG1.png"), width = 8, height = 5)
# UMAP
input_umap_dat <- Embeddings(data_reclustered, reduction = "umap") |>
as.data.frame() |>
rownames_to_column() |>
left_join(rownames_to_column(data_reclustered@meta.data),
by = "rowname") |>
dplyr::rename("Cluster type" = "celltype",
"Cluster id" = "clusters")
# Compute centroids
centroids <- input_umap_dat |>
group_by(`Cluster id`, `Cluster type`) |>
summarise(umap_1 = mean(umap_1), umap_2 = mean(umap_2))
# UMAP plot with centroid labels
in_umap_shuff <- input_umap_dat[sample(nrow(input_umap_dat)), ]
in_umap_shuff |>
mutate("Cell type" = factor(fctr_celltype, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = umap_1, y = umap_2,
colour = `Cell type`)) +
geom_point(alpha = 0.4, size = 0.4) +
geom_text_repel(data = centroids,
aes(x = umap_1 + 0.5, y = umap_2 + 0.5, label = `Cluster id`),
size = 3, fontface = "bold", color = "black",
box.padding = 0.3, point.padding = 0.2,
segment.color = NA, inherit.aes = FALSE) +
labs(x = "UMAP Axis 1", y = "UMAP Axis 2",
title = "UMAP Plot",
subtitle = "All treatments") +
scale_color_manual(values = palette) +
theme_classic() +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
ggsave(file.path(fig_folder, "UMAP_across_trt_FIG1.png"), width = 8, height = 5)
# UMAP
input_umap_dat <- Embeddings(data_reclustered, reduction = "umap") |>
as.data.frame() |>
rownames_to_column() |>
left_join(rownames_to_column(data_reclustered@meta.data),
by = "rowname") |>
dplyr::rename("Cluster type" = "celltype",
"Cluster id" = "clusters")
# Compute centroids
centroids <- input_umap_dat |>
group_by(`Cluster id`, `Cluster type`) |>
summarise(umap_1 = mean(umap_1), umap_2 = mean(umap_2))
# UMAP plot with centroid labels
in_umap_shuff <- input_umap_dat[sample(nrow(input_umap_dat)), ]
in_umap_shuff |>
mutate("Cell type" = factor(fctr_celltype, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = umap_1, y = umap_2,
colour = `Cell type`)) +
geom_point(alpha = 0.4, size = 0.4) +
geom_text_repel(data = centroids,
aes(x = umap_1 + 0.5, y = umap_2 + 0.5, label = `Cluster id`),
size = 3, fontface = "bold", color = "black",
box.padding = 0.3, point.padding = 0.2,
segment.color = NA, inherit.aes = FALSE) +
labs(x = "UMAP Axis 1", y = "UMAP Axis 2",
title = "UMAP visualization of cell type diversity across treatments") +
scale_color_manual(values = palette) +
theme_classic() +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
ggsave(file.path(fig_folder, "UMAP_across_trt_FIG1.png"), width = 4, height = 4)
# UMAP
input_umap_dat <- Embeddings(data_reclustered, reduction = "umap") |>
as.data.frame() |>
rownames_to_column() |>
left_join(rownames_to_column(data_reclustered@meta.data),
by = "rowname") |>
dplyr::rename("Cluster type" = "celltype",
"Cluster id" = "clusters")
# Compute centroids
centroids <- input_umap_dat |>
group_by(`Cluster id`, `Cluster type`) |>
summarise(umap_1 = mean(umap_1), umap_2 = mean(umap_2))
# UMAP plot with centroid labels
in_umap_shuff <- input_umap_dat[sample(nrow(input_umap_dat)), ]
in_umap_shuff |>
mutate("Cell type" = factor(fctr_celltype, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = umap_1, y = umap_2,
colour = `Cell type`)) +
geom_point(alpha = 0.4, size = 0.4) +
geom_text_repel(data = centroids,
aes(x = umap_1 + 0.5, y = umap_2 + 0.5, label = `Cluster id`),
size = 3, fontface = "bold", color = "black",
box.padding = 0.3, point.padding = 0.2,
segment.color = NA, inherit.aes = FALSE) +
labs(x = "UMAP Axis 1", y = "UMAP Axis 2",
title = "UMAP visualization of cell type diversity across treatments") +
scale_color_manual(values = palette) +
theme_classic() +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
ggsave(file.path(fig_folder, "UMAP_across_trt_FIG1.png"), width = 6 height = 4)
# UMAP
input_umap_dat <- Embeddings(data_reclustered, reduction = "umap") |>
as.data.frame() |>
rownames_to_column() |>
left_join(rownames_to_column(data_reclustered@meta.data),
by = "rowname") |>
dplyr::rename("Cluster type" = "celltype",
"Cluster id" = "clusters")
# Compute centroids
centroids <- input_umap_dat |>
group_by(`Cluster id`, `Cluster type`) |>
summarise(umap_1 = mean(umap_1), umap_2 = mean(umap_2))
# UMAP plot with centroid labels
in_umap_shuff <- input_umap_dat[sample(nrow(input_umap_dat)), ]
in_umap_shuff |>
mutate("Cell type" = factor(fctr_celltype, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = umap_1, y = umap_2,
colour = `Cell type`)) +
geom_point(alpha = 0.4, size = 0.4) +
geom_text_repel(data = centroids,
aes(x = umap_1 + 0.5, y = umap_2 + 0.5, label = `Cluster id`),
size = 3, fontface = "bold", color = "black",
box.padding = 0.3, point.padding = 0.2,
segment.color = NA, inherit.aes = FALSE) +
labs(x = "UMAP Axis 1", y = "UMAP Axis 2",
title = "UMAP visualization of cell type diversity across treatments") +
scale_color_manual(values = palette) +
theme_classic() +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
ggsave(file.path(fig_folder, "UMAP_across_trt_FIG1.png"),
width = 6, height = 4)
# UMAP
input_umap_dat <- Embeddings(data_reclustered, reduction = "umap") |>
as.data.frame() |>
rownames_to_column() |>
left_join(rownames_to_column(data_reclustered@meta.data),
by = "rowname") |>
dplyr::rename("Cluster type" = "celltype",
"Cluster id" = "clusters")
# Compute centroids
centroids <- input_umap_dat |>
group_by(`Cluster id`, `Cluster type`) |>
summarise(umap_1 = mean(umap_1), umap_2 = mean(umap_2))
# UMAP plot with centroid labels
in_umap_shuff <- input_umap_dat[sample(nrow(input_umap_dat)), ]
in_umap_shuff |>
mutate("Cell type" = factor(fctr_celltype, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = umap_1, y = umap_2,
colour = `Cell type`)) +
geom_point(alpha = 0.4, size = 0.4) +
geom_text_repel(data = centroids,
aes(x = umap_1 + 0.5, y = umap_2 + 0.5, label = `Cluster id`),
size = 3, fontface = "bold", color = "black",
box.padding = 0.3, point.padding = 0.2,
segment.color = NA, inherit.aes = FALSE) +
labs(x = "UMAP Axis 1", y = "UMAP Axis 2",
title = "UMAP visualization of cell type diversity across treatments") +
scale_color_manual(values = palette) +
theme_classic() +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
ggsave(file.path(fig_folder, "UMAP_across_trt_FIG1.png"),
width = 6, height = 4.5)
set.seed(22)
# Get all unique cell types from the dataset
all_celltypes <- unique(data_reclustered$SingleR.pruned)
palette <- distinctColorPalette(length(all_celltypes))
names(palette) <- all_celltypes
## Order the cell types
order_celltypes <- data_reclustered@meta.data |>
group_by(SingleR.pruned) |>
summarise(count = n()) |>
arrange((count)) |>
pull(SingleR.pruned)
plotting_data <- data_reclustered@meta.data |>
mutate("Cell type" = factor(SingleR.pruned, levels = order_celltypes))
plotting_data |>
filter(!is.na(SingleR.pruned)) |>
ggplot2::ggplot(aes(x = Treatment, fill = `Cell type`)) +
geom_bar(stat = "count") +
ggplot2::scale_fill_manual(values = palette) +
ggplot2::theme_bw() +
ggplot2::xlab("Treatment") +
ggplot2::ylab("Cell count") +
ggplot2::coord_flip() +
ggplot2::labs(title = "Differential cell type composition across treatments") +
theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 4))
ggsave(file.path(fig_folder, "celltypes_trt_prop_FIG1.png"), height = 4, width = 9, units = "in")
# UMAP
input_umap_dat <- Embeddings(data_reclustered, reduction = "umap") |>
as.data.frame() |>
rownames_to_column() |>
left_join(rownames_to_column(data_reclustered@meta.data),
by = "rowname") |>
dplyr::rename("Cluster type" = "celltype",
"Cluster id" = "clusters")
# Compute centroids
centroids <- input_umap_dat |>
group_by(`Cluster id`, `Cluster type`) |>
summarise(umap_1 = mean(umap_1), umap_2 = mean(umap_2))
# UMAP plot with centroid labels
in_umap_shuff <- input_umap_dat[sample(nrow(input_umap_dat)), ]
in_umap_shuff |>
mutate("Cell type" = factor(fctr_celltype, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = umap_1, y = umap_2,
colour = `Cell type`)) +
geom_point(alpha = 0.4, size = 0.4) +
geom_text_repel(data = centroids,
aes(x = umap_1 + 0.5, y = umap_2 + 0.5, label = `Cluster id`),
size = 3, fontface = "bold", color = "black",
box.padding = 0.3, point.padding = 0.2,
segment.color = NA, inherit.aes = FALSE) +
labs(x = "UMAP Axis 1", y = "UMAP Axis 2",
title = "UMAP visualization of cell type diversity across treatments") +
scale_color_manual(values = palette) +
theme_classic() +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
ggsave(file.path(fig_folder, "UMAP_across_trt_FIG1.png"),
width = 6, height = 4.5)
cluster_matched_cells <- tibble(cluster = Idents(data_reclustered), data_reclustered[["SingleR.pruned"]])
summary_main <- cluster_matched_cells |>
arrange(cluster) |>
group_by(cluster, SingleR.pruned) |>
summarise(num_each = n()) |>
arrange(cluster, desc(num_each))
summary_main |>
dplyr::mutate(proportion = num_each / sum(num_each),
"Cell type" = factor(SingleR.pruned, levels = order_celltypes)) |>
ggplot2::ggplot(aes(x = cluster, y = num_each, fill = `Cell type`)) +
geom_bar(stat = "identity") +
ggplot2::scale_fill_manual(values = palette) +
ggplot2::theme_bw() +
labs(main = "Cell Type Composition Across Clusters") +
ggplot2::xlab("Cluster") +
ggplot2::ylab("Total cell count") +
theme(legend.position = "bottom") +
labs(title = "Proportion of cell types by cluster",
subtitle = "All treatments")
ggsave(file.path(fig_folder, "barplot_main_labels_FIG1.png"),
width = 9, height = 5, units = "in")
suppressPackageStartupMessages({
library(tidyverse)
library(TBSignatureProfiler)
library(MultiAssayExperiment)
})
fig_folder <- "~/altcells/singlecellseq/vitalia_scs_aro/figures_tm"
compareBoxplots(inputData = in_dat,
annotationData = new_df,
annotationColName = "Disease",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
suppressPackageStartupMessages({
library(tidyverse)
library(TBSignatureProfiler)
library(MultiAssayExperiment)
})
fig_folder <- "~/altcells/singlecellseq/vitalia_scs_aro/figures_tm"
data_reclustered <- readRDS("~/altcells/singlecellseq/vitalia_scs_aro/processed_data/data_reclustered.RDS")
# Read in sig
make_sig_list <- function(sig) {
URL_loc <- paste0( "https://www.gsea-msigdb.org/gsea/msigdb/human/download_geneset.jsp?geneSetName=",
sig,
"&fileType=TSV")
geneset1 <- read.delim(URL_loc) |>
dplyr::filter(STANDARD_NAME == "GENE_SYMBOLS") |>
pull(2) |>
stringr::str_split(",") |>
unlist() |>
stringr::str_to_sentence()
}
sig_names <- c("HP_THORACIC_AORTA_CALCIFICATION",
"HP_VASCULAR_CALCIFICATION",
"HP_MITRAL_VALVE_CALCIFICATION",
"HP_AORTIC_VALVE_CALCIFICATION",
"HP_CALCIFICATION_OF_THE_AORTA",
"HP_CARDIAC_VALVE_CALCIFICATION",
"HP_CARDIOVASCULAR_CALCIFICATION"
)
calc_sigs <- sig_names |>
plyr::alply(1, make_sig_list) |>
set_names(sig_names)
sigs_in <- unique(unlist(calc_sigs))
new_counts <- data_reclustered@assays$integrated$scale.data
set.seed(5000)
which_in <- sigs_in %in% rownames(new_counts)
all_cells <- rownames(new_counts) |>
sample(size = 1000, replace = FALSE) |>
append(sigs_in[which_in]) |>
unique() |>
unlist()
new_counts_sub <- new_counts[all_cells, ]
SE_rec <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts = new_counts_sub),
colData = data_reclustered@meta.data)
outsig_x2 <- TBSignatureProfiler::runTBsigProfiler(
SE_rec,
useAssay = "counts",
algorithm = c("PLAGE", "ssGSEA"),
combineSigAndAlgorithm = TRUE,
signatures = calc_sigs,
outputFormat = "SummarizedExperiment",
parallel.sz = parallel::detectCores()
)
colData(outsig_x2) <- cbind(colData(outsig_x2),
colData(SE_rec))
all_sigs <- paste(c("PLAGE", "ssGSEA"), names(calc_sigs), sep = "_")
new_df <- data.frame(Trt = colData(SE_rec)$Treatment)
rownames(new_df) <- rownames(colData(SE_rec))
# make numeric
in_dat <- as.data.frame(colData(outsig_x2))[, all_sigs]
signatureBoxplot(inputData = in_dat,
annotationData = new_df,
signatureColNames = all_sigs,
scale = TRUE)
ggsave(file.path(fig_folder, "sigs_boxplot.png"),
units = "in", width = 12, height = 7)
compareBoxplots(inputData = in_dat,
annotationData = new_df,
annotationColName = "Disease",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
?compareBoxplots
compareBoxplots(inputData = outsig_x2,
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
compareBoxplots(SE_scored = outsig_x2,
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
compareBoxplots(SE_scored = outsig_x2,
annotationColName = Treatment,
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
compareBoxplots(SE_scored = outsig_x2,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
class(outsig_x2)
colData(outsig_x2) %>%
as.data.frame()
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "Control")) %>%
rownames()
filtered_samples
se_filtered <- outsig_x2[, filtered_samples]
se_filtered
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
se_filtered
(se_filtered$Treatment)
unique(se_filtered$Treatment)
unique(outsig_x2$Treatment)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "control")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 12, height = 7)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "control")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 12, height = 4)
all_sigs
calc_sigs
names(calc_sigs)
paste(c("PLAGE", "ssGSEA"), names(calc_sigs), sep = "_")
all_sigs <- paste(c("PLAGE"), names(calc_sigs),
sep = "_") |>
append(paste(c("ssGSEA"), names(calc_sigs),
sep = "_"))
new_df <- data.frame(Trt = colData(SE_rec)$Treatment)
rownames(new_df) <- rownames(colData(SE_rec))
# make numeric
in_dat <- as.data.frame(colData(outsig_x2))[, all_sigs]
signatureBoxplot(inputData = in_dat,
annotationData = new_df,
signatureColNames = all_sigs,
scale = TRUE)
ggsave(file.path(fig_folder, "sigs_boxplot.png"),
units = "in", width = 12, height = 7)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "control")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 12, height = 4)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "control")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 12, height = 4)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 6, height = 4)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 6, height = 9)
# Limit treatment to PTX vs. Control
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c("Ptreatment", "PDtreatment")) %>%
rownames()
se_filtered <- outsig_x2[, filtered_samples]
compareBoxplots(SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE, rotateLabels = TRUE)
ggsave(file.path(fig_folder, "gsea_compare_boxplots.png"),
units = "in", width = 6, height = 9)
unique(se_filtered$Treatment)
unique(outsig_x2$Treatment)
# Define all treatment combinations
treatments <- c("PDtreatment", "Ptreatment", "Dtreatment", "control")
combinations <- combn(treatments, 2, simplify = FALSE)
# Loop through each pairwise combination
for (combo in combinations) {
treatment1 <- combo[1]
treatment2 <- combo[2]
# Filter samples for the current treatment combination
filtered_samples <- colData(outsig_x2) %>%
as.data.frame() %>%
filter(Treatment %in% c(treatment1, treatment2)) %>%
rownames()
# Subset the SummarizedExperiment
se_filtered <- outsig_x2[, filtered_samples]
# Generate the boxplot
compareBoxplots(
SE_scored = se_filtered,
annotationColName = "Treatment",
signatureColNames = all_sigs,
pb.show = FALSE,
rotateLabels = TRUE
)
# Save the plot with a unique filename
filename <- paste0("gsea_compare_boxplots_", treatment1, "_vs_", treatment2, ".png")
ggsave(file.path(fig_folder, filename), units = "in", width = 6, height = 9)
}
